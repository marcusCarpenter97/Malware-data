import os
import json
import logging
from pympler.asizeof import asizeof

class Batch:

    analysis_dir = "/opt/CAPEv2/storage/analyses"
    result_file = "reports/report.json"

    def __init__(self, name, year, start, stop):
        self.name = name
        self.year = year
        self.start = start
        self.stop = stop
        self.reports = []

    def load_reports(self):
        """
        This method extracts hand picked features from the original reports.
        """
        # The last report would not be considered because the range operater is
        # exclusive at the end limit. The +1 is a quick hack that allows for
        # the final report to be included in the results, without having to
        # create a new custom function.
        for report_num in range(self.start, self.stop+1):
            report_path = os.path.join(Batch.analysis_dir, str(report_num), Batch.result_file)

            report = open_json(report_path)
            if report:
                result = {}
                result["type"] = report.get("info").get("package")
                result["id"] = report.get("target").get("file").get("md5")
                # TODO should different processes be considered separetely?
                result["apis"] = [api_call["api"] for process in report["behavior"]["processes"]
                        for api_call in process["calls"]]
                vt = report.get("virustotal")
                if vt:
                    result["virustotal-positive"] = vt.get("positive")
                    result["virustotal-total"] = vt.get("total")
                    result["virustotal-label"] = vt.get("detection")
                result["malscore"] = report.get("malscore")
                result["timestamp"] = report.get("target").get("file").get("timestamp")

                self.reports.append(result)

    def calculate_memory_usage(self):
        return asizeof(self.reports)

    def get_size_of_batch(self):
        return len(self.reports)

def open_json(path):
    try:
        with open(path) as pf:
            return json.load(pf)
    except FileNotFoundError:
        logging.debug("%s is missing.", path)
    except json.decoder.JSONDecodeError:
        logging.debug("%s is empty.", path)
    return None
