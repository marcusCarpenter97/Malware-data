import os
import json
import logging
from pympler.asizeof import asizeof

class Batch:

    file_paths = "file_paths.json"
    conf_path = "cape-features-conf.json"

    def __init__(self, name, year, start, stop):
        self.name = name
        self.year = year
        self.start = start
        self.stop = stop
        self.reports = []
        self.vt_labels = []

    def to_string(self):
        return f"""Batch name: {self.name}\nBatch year: {self.year}\nNumber of reports: {len(self.reports)}\nNumber of labels: {len(self.vt_labels)}\nMemory usage for reports: {asizeof(self.reports)} bytes\nMemory usage for labels: {asizeof(self.vt_labels)} bytes"""

    def load_reports(self):
        """
        This method extracts hand picked features from the original reports.
        """
        result_hashes = set()
        fp = open_json(Batch.file_paths)
        if fp is None:
            raise SystemExit

        # The last report would not be considered because the range operater is
        # exclusive at the end limit. The +1 is a quick hack that allows for
        # the final report to be included in the results, without having to
        # create a new custom function.
        for report_num in range(self.start, self.stop+1):
            report_path = os.path.join(fp["cape_analysis_dir"], str(report_num), fp["cape_result_file"])

            report = open_json(report_path)
            if report:
                result = {}
                result["type"] = report.get("info", {}).get("package", None)
                result["id"] = report.get("target", {}).get("file", {}).get("md5", None)
                # TODO should different processes be considered separetely?
                # Yes. Don't worry about models for now.
                result["apis"] = [api_call["api"] for process in report["behavior"]["processes"]
                        for api_call in process["calls"]]
                result["virustotal-positive"] = report.get("virustotal", {}).get("positive", None)
                result["virustotal-total"] = report.get("virustotal", {}).get("total", None)
                result["virustotal-label"] = report.get("virustotal", {}).get("detection", None)
                result["malscore"] = report.get("malscore", None)
                result["timestamp"] = report.get("target", {}).get("file", {}).get("timestamp", None)

                self.reports.append(result)
                result_hashes.add(result["id"])
        return result_hashes

    def load_vt_reports(self, report_hashes):

        fp = open_json(Batch.file_paths)
        if fp is None:
            raise SystemExit

        if not report_hashes:
            return

        try:
            vt_files = os.listdir(fp.get(self.name, ""))
        except FileNotFoundError as msg:
            logging.debug("Batch %s has no VirusShare file. Error: %s", self.name, msg)
            return

        for vt_file in vt_files:
            vt_path = os.path.join(fp[self.name], vt_file)
            vt_results = open_json(vt_path)
            if vt_results:
                vt_md5 = vt_results.get("data", {}).get("attributes",
                        {}).get("md5", None)
                if vt_md5 in report_hashes:
                    result = {}
                    result["md5"] = vt_md5

                    result["stats"] = vt_results.get("data",
                            {}).get("attributes",
                                    {}).get("last_analysis_stats", None)

                    result["tags"] = vt_results.get("data",
                            {}).get("attributes", {}).get("tags", None)

                    # TODO category, engine_name
                    result["av-info"] = vt_results.get("data",
                            {}).get("attributes",
                                    {}).get("last_analysis_results", None)

                    result["label"] = vt_results.get("data",
                            {}).get("attributes",
                                    {}).get("popular_threat_classification",
                                            {}).get("suggested_threat_label",
                                                    None)

                    result["category"] = vt_results.get("data",
                            {}).get("attributes",
                                    {}).get("popular_threat_classification",
                                            {}).get("popular_threat_category",
                                                    None)

                    result["names"] = vt_results.get("data",
                            {}).get("attributes",
                                    {}).get("popular_threat_classification",
                                            {}).get("popular_threat_name",
                                                    None)

                    self.vt_labels.append(result)

def open_json(path):
    try:
        with open(path) as pf:
            return json.load(pf)
    except FileNotFoundError:
        logging.debug("%s is missing.", path)
    except json.decoder.JSONDecodeError as msg:
        logging.debug("File '%s' has error: %s", path, msg)
    return None
