""" Create malware dataset from CAPE report files. """
import os
import shutil
import json
from pprint import pprint
from collections import OrderedDict
from datetime import datetime as dt

DATA_DIR = "/home/cape/Malware-Data/Processed/"

def load_data(data_dir):
    """ Returns a list of batch dictionaries. """

    data = []
    data_files = os.listdir(data_dir)

    for data_file in data_files:
        file_path = os.path.join(data_dir, data_file)
        with open(file_path, "r") as fp:
            data.append(json.load(fp))
    return data

def open_json(path):
    try:
        with open(path,  "r") as fp:
            return json.load(fp)

    except json.decoder.JSONDecodeError as err:
        print(f"Could not open {report_path} - {err}")
        return None

    except FileNotFoundError as err:
        print(f"Could not open - {err}")
        return None

def remove_missing_data(data):
    """ Returns a list of batch dictionaries. """

    for batch in data:
        clean_apis = []
        clean_labels = []
        for idx, sample in enumerate(batch['apis']):
            if sample:
                clean_apis.append(sample)
                clean_labels.append(batch['labels'][idx])
        batch['apis'] = clean_apis
        batch['labels'] = clean_labels
    return data

def make_lookup_table(report_dir):
    """ Create a look up table containing all unique malware classes found in the VirusTotal reports. """
    lookup_table = ["benign", "malware"]
    reports = os.listdir(report_dir)

    for report in reports:
        report_path = os.path.join(report_dir, report)

        with open(report_path, 'r') as rp:
            report_data = json.load(rp)

        malware_labels = report_data.get("data", {}).get("attributes",
                {}).get("popular_threat_classification", {}).get("popular_threat_category", {})

        for malware_label in malware_labels:
            if malware_label["value"] not in lookup_table:
                lookup_table.append(malware_label["value"])

    return lookup_table

def make_label(malware_labels, lookup_table, is_benign=False):
    """ Make label for a malware sample based on the contents of the corresponding VirusTotal report. """

    empty_label = [0 for _ in range(len(lookup_table))]

    for malware_label in malware_labels:
        idx = lookup_table.index(malware_label["value"])
        empty_label[idx] = 1

    if is_benign:
        empty_label[lookup_table.index("benign")] = 1

    # Some malware have no specific category so they are labeled as 'malware'
    if not any(empty_label):
        empty_label[lookup_table.index("malware")] = 1

    return empty_label

def extract_apis(report):
    timestamps = []
    apis = []
    for process in report.get("behavior", {}).get("processes", {}):
        for call in process.get("calls", {}):
            timestamps.append(call["timestamp"])
            apis.append(call["api"])

    datetime_format = "%Y-%m-%d %H:%M:%S,%f"
    times = [dt.strptime(timestamp, datetime_format) for timestamp in timestamps]

    return [api for _, api in sorted(zip(times, apis))]

def compile_data(report_dir, label_dir=None):

    with open("lookup_table.json", "r") as tl:
        lookup_table = json.load(tl)

    reports = os.listdir(report_dir)
    report_count = len(reports)

    apis = []
    labels = []
    print(f"\nCompiling data from: {report_dir}")
    for idx, report in enumerate(reports):
        print(f"{idx}/{report_count}\r", end="")

        report_path = os.path.join(report_dir, report)

        with open(report_path, 'r') as rp:  # TODO open_json
            report_data = json.load(rp)

        apis.append(extract_apis(report_data))

        if label_dir:
            label_path = os.path.join(label_dir, report)

            with open(label_path, 'r') as lp:
                label_data = json.load(lp)

            malware_labels = label_data.get("data", {}).get("attributes",
                    {}).get("popular_threat_classification", {}).get("popular_threat_category", {})

            labels.append(make_label(malware_labels, lookup_table))
        else:
            labels.append(make_label([], lookup_table, is_benign=True))

    return apis, labels

def save_data(batch_name, year, apis, labels, save_dir):
    data = {}
    data["name"] = batch_name
    data["year"] = year
    data["apis"] = apis
    data["labels"] = labels

    path = os.path.join(save_dir, f"{batch_name}.json")
    print(f"Saving data to {path}")
    with open(path, "w") as fp:
        json.dump(data, fp, indent=4)

def from_cape_to_full(batch, start, stop):
    """ Move files from CAPE directories into the Full data directory.
        One batch at a time. """
    base_cape_report_path = "/opt/CAPEv2/storage/analyses/"
    end_cape_report_path = "reports/report.json"
    base_cape_dir = "CAPE_"
    base_target = "../Malware-Data/Full"
    target_name = f"{base_cape_dir}{batch}"

    target_dir = os.path.join(base_target,target_name)

    current_cape_reports = os.listdir(base_cape_report_path)

    for report_idx in range(start, stop):
        report_path = os.path.join(base_cape_report_path, str(report_idx), end_cape_report_path)

        report_data = open_json(report_path)

        if not report_data:
            continue

        md5 = report_data.get("target", {}).get("file", {}).get("md5", {})
        target_name = os.path.join(target_dir, md5)

        print(f"Copying {report_path} to {target_name}")

        try:
            shutil.copy(report_path, f"{target_name}.json")
        except FileNotFoundError as err:
            print(f"Could not copy - {err}")

def from_full_to_clean():
    """ Filter Full dataset into the Clean directory.
        Clean data separates the batches in directories and each sample in a JSON
        file. Each sample contains the timestamp and API sequences for all
        processes, and text labels from VirusTotal. """

    # for each CAPE in Full
    #  for each file in CAPE
    #   if file contains behavior
    #    extract behavior from CAPE
    #    open matching VT file
    #    extract VT labels
    #    if no VT labels and not benign mark as malware
    #    if bening flag set mark as bening
    #    save sample as JSON. Think of dictionary format.

    base_target = "/home/cape/Malware-Data/Full"
    base_cape_dir = "CAPE_"
    full_dirs = os.listdir(base_target)
    cape_dirs = [sub_dir for sub_dir in full_dirs if base_cape_dir in sub_dir]

    for cape_dir in cape_dirs:
        batch_path = os.path.join(base_target, cape_dir)
        batch_files = os.listdir(batch_path)

        for cape_report in batch_files:
            report_path = os.path.join(base_target, cape_dir, cape_report)
            report_data = open_json(report_path)
            data = report_data["behavior"]["processes"]
            if len(data) > 1:
                print(report_path)
                raise SystemExit

if __name__ == "__main__":
    vt_389 = "/home/cape/Malware-Data/Full/VirusShare_00389"
    vt_368 = "/home/cape/Malware-Data/Full/VirusShare_00368"
    cape_389 = "/home/cape/Malware-Data/Clean/CAPE_389"
    cape_benign = "/home/cape/Malware-Data/Clean/CAPE_benign"
    
    #with open("cape-ranges.json", "r") as fp:
    #    cape_ranges = json.load(fp)

    #target_batch = "368" 

    #copy_from_cape(target_batch, cape_ranges[target_batch]["start"], cape_ranges[target_batch]["stop"])

    from_full_to_clean()

    #lookup_table389 = make_lookup_table(vt_389)
    #lookup_table368 = make_lookup_table(vt_368)

    #print(lookup_table389)
    #print(lookup_table368)

    #lookup_table = list(OrderedDict.fromkeys(lookup_table389+lookup_table368))

    #with open("lookup_table.json", "w") as tl:
    #    json.dump(lookup_table, tl)

    #apis, labels = compile_data(cape_389, vt_389)
    #save_data("389", 2022, apis, labels, DATA_DIR)

    #apis, labels = compile_data(cape_benign)
    #save_data("benign", 2022, apis, labels, DATA_DIR)

