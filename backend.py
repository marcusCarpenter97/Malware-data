""" Create malware dataset from CAPE report files. """
import os
import json
from pympler import asizeof
from datetime import datetime as dt

def make_lookup_table(report_dir):
    """ Create a look up table containing all unique malware classes found in the VirusTotal reports. """
    lookup_table = ["malware"]
    reports = os.listdir(report_dir)

    for report in reports:
        report_path = os.path.join(report_dir, report)

        with open(report_path, 'r') as rp:
            report_data = json.load(rp)

        malware_labels = report_data.get("data", {}).get("attributes",
                {}).get("popular_threat_classification", {}).get("popular_threat_category", {})

        for malware_label in malware_labels:
            if malware_label["value"] not in lookup_table:
                lookup_table.append(malware_label["value"])

    with open("lookup_table.json", "w") as tl:
        json.dump(lookup_table, tl)

    return lookup_table

def make_benign_labels(num_labels, label_len=0, lookup_table="lookup_table.json"):
    """ Produce benign labels. """
    if not label_len:
        with open(lookup_table, "r") as tl:
            table = json.load(tl)
        label_len = len(table)

    benign_label = [0 for _ in range(label_len)]

    if num_labels == 1:
        return benign_label
    else: 
        return [benign_label for _ in range(num_labels)]

def make_label(report, lookup_table):
    """ Make label for a malware sample based on the contents of the corresponding VirusTotal report. """

    malware_labels = report.get("data", {}).get("attributes",
            {}).get("popular_threat_classification", {}).get("popular_threat_category", {})


    label = make_benign_labels(1, len(lookup_table))
    for malware_label in malware_labels:
        idx = lookup_table.index(malware_label["value"])
        label[idx] = 1

    # Some malware have no specific category so they are labeled as 'malware'
    if not any(label):
        label[0] = 1

    return label

def extract_apis(report):
    timestamps = []
    apis = []
    for process in report.get("behavior", {}).get("processes", {}):
        for call in process.get("calls", {}):
           timestamps.append(call["timestamp"])
           apis.append(call["api"])

    datetime_format = "%Y-%m-%d %H:%M:%S,%f"
    times = [dt.strptime(timestamp, datetime_format) for timestamp in timestamps]

    return [api for _, api in sorted(zip(times, apis))]

def compile_data(report_dir, label_dir=None, debug=False):

    with open("lookup_table.json", "r") as tl:
        lookup_table = json.load(tl)

    reports = os.listdir(report_dir)
    report_count = len(reports)

    apis = []
    labels = []
    for idx, report in enumerate(reports):
        print(f"{idx}/{report_count}")

        report_path = os.path.join(report_dir, report)

        with open(report_path, 'r') as rp:
            report_data = json.load(rp)

        apis.append(extract_apis(report_data))

        if label_dir:
            label_path = os.path.join(label_dir, report)

            with open(label_path, 'r') as lp:
                label_data = json.load(lp)

            labels.append(make_label(label_data, lookup_table))

    if not label_dir:
        labels = make_benign_labels(report_count)

    if debug:
        print(f"Size of apis: {asizeof.asizeof(apis)} - Size of labels: {asizeof.asizeof(labels)}")

    return apis, labels

def save_data(batch_name, year, apis, labels, save_dir):
    data = {}
    data["name"] = batch_name
    data["year"] = year
    data["apis"] = apis
    data["labels"] = labels

    path = os.path.join(save_dir, f"{batch_name}.json")
    print(f"Saving data to {path}")
    with open(path, "w") as fp:
        json.dump(data, fp, indent=4)

if __name__ == "__main__":
    target_vt_files = "/home/cape/Malware-Data/Clean/VirusShare_00389"
    target_cape_files = "/home/cape/Malware-Data/Clean/CAPE_benign"
    target_save_dir = "/home/cape/Malware-Data/Processed"
    apis, labels = compile_data(target_cape_files)
    save_data("benign", 2022, apis, labels, target_save_dir)
