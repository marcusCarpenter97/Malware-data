import logging
import backend

class CapeDataHandler:

    def __init__(self):
        logging.basicConfig(level=logging.DEBUG,
                format="%(asctime)s - %(levelname)s: %(message)s",
                handlers=[logging.StreamHandler(),
                logging.FileHandler("capeDataHandler.log")])
        logging.info("Logger initialised by cape data handler.")

        conf_path = "cape-features-conf.json"
        batch_meta_data = backend.open_json(conf_path)
        self.batches = {}

        for batch_name in batch_meta_data:
            self.batches[batch_name] = backend.Batch(batch_name,
                    batch_meta_data[batch_name]["year"],
                    batch_meta_data[batch_name]["start"],
                    batch_meta_data[batch_name]["stop"])

    def load_data(self):
        logging.info("Loading data into memory.")
        for batch_name in self.batches:
            logging.info("Loading batch: %s", batch_name)
            self.batches[batch_name].load_reports()

    def check_batch_size(self, batch_name=None):
        if batch_name:
            print(f"Memory usage for batch {batch_name}: {self.batches[batch_name].calculate_memory_usage()} bytes")
            print(f"Number of reports in batch {batch_name}: {self.batches[batch_name].get_size_of_batch()}")
        else:
            for batch in self.batches:
                print(f"Memory usage for batch {batch}: {self.batches[batch].calculate_memory_usage()} bytes")
                print(f"Number of reports in batch {batch}: {self.batches[batch].get_size_of_batch()}")

