""" Generate statistics on and study features in CAPE reports. """
import os
import json
import pprint
import shutil

DATA_PATH = "/media/cape/Seagate Expansion Drive/Malware-dataset/Full"

def count_features():
    """ Build a dictionary containing a histogram of the features found in the
    data. """

    cape_prefix = "CAPE_"
    result = {}

    cape_dirs = [item for item in os.listdir(DATA_PATH) if cape_prefix in item]
    for cape_dir in cape_dirs:
        batch_path = os.path.join(DATA_PATH, cape_dir)
        batch_files = os.listdir(batch_path)

        histogram = {}
        
        for report in batch_files:
            report_path = os.path.join(batch_path, report)
            with open(report_path, 'r') as rp:
                report_contents = json.load(rp)

            for key in report_contents.keys():
                if key in histogram:
                    histogram[key] += 1
                else:
                    histogram[key] = 1

        result[cape_dir] = histogram
    return result

def find_malicious_bening():
    """ Find benign samples that were flagged as malicious. """

    benign_dir = "CAPE_benign"

    benign_path = os.path.join(DATA_PATH, benign_dir)

    for benign_report in os.listdir(benign_path):
        report_path = os.path.join(benign_path, benign_report)
        with open(report_path, 'r') as rp:
            report_data = json.load(rp)

        if 'detections' in report_data.keys() or 'malfamily_tag' in report_data.keys():
            print(report_path)

def check_file_names():
    root = "/media/cape/Seagate Expansion Drive/"

    exe = "MALWARE VirusShare_00389/"

    cape = "Malware-dataset/Full/CAPE_389"

    vt = "Malware-dataset/Full/VirusShare_00389"

    orig_exe = os.listdir(os.path.join(root,exe))
    orig_exe = [name[11:] for name in orig_exe]

    cape_reports = os.listdir(os.path.join(root,cape))
    cape_reports = [name[:-5] for name in cape_reports]

    cape_exe_inter = set(orig_exe) & set(cape_reports)

    print("orig_exe len:", len(orig_exe))
    print("cape_reports len:", len(cape_reports))
    print("cape_exe_inter len:", len(cape_exe_inter))

    vt_md5s = []
    vt_files = os.listdir(os.path.join(root,vt))
    for count, vt_file in enumerate(vt_files):
        vt_path = os.path.join(root,vt,vt_file)
        print(f"\r {count}/{len(vt_files)}", end="")
        with open(vt_path) as vp:
            vt_contents = json.load(vp)
        vt_md5s.append(vt_contents["data"]["attributes"]["md5"])

    print("\nvt_md5s len:", len(vt_md5s))

    print("exe and vt:", len(set(orig_exe) & set(vt_md5s)))
    print("cape and vt:", len(set(cape_reports) & set(vt_md5s)))
    print("exe and cape and vt:", len(set(orig_exe) & set(cape_reports) & set(vt_md5s)))

def make_clean_data():
    cape = "CAPE_389"
    vt = "VirusShare_00389"

    target_path = "/media/cape/Seagate Expansion Drive/Malware-dataset/Clean"

    cape_reports = os.listdir(os.path.join(DATA_PATH,cape))
    cape_md5s = [name[:-5] for name in cape_reports]

    vt_files = os.listdir(os.path.join(DATA_PATH,vt))
    for count, vt_file in enumerate(vt_files):
        vt_path = os.path.join(DATA_PATH,vt,vt_file)
        print(f"\r {count}/{len(vt_files)}", end="")
        with open(vt_path) as vp:
            vt_contents = json.load(vp)
        md5 = vt_contents["data"]["attributes"]["md5"]

        if md5 in cape_md5s:
            shutil.copy(os.path.join(DATA_PATH,cape,f"{md5}.json"),os.path.join(target_path,cape))
            shutil.copy(os.path.join(vt_path),os.path.join(target_path,vt,f"{md5}.json"))

def count_malware_types():
    """ Make a histogram of all malware types present in the data. """
    target_path = "/media/cape/Seagate Expansion Drive/Malware-dataset/Clean/VirusShare_00389"
    label_histogram = {}  # Full sugested label
    category_histogram = {}  # Individual malware types
    name_histogram = {}  # Individual mawlare names

    missing_full = []
    missing_category = []
    missing_name = [] 

    count_labels = 0

    def increment_histogram(sublabels, histogram):
        for item in sublabels:
            if item["value"] in histogram:
                histogram[item["value"]] += 1
            else:
                histogram[item["value"]] = 1

    vt_files = os.listdir(target_path)
    for vt_file in vt_files:
        with open(os.path.join(target_path,vt_file)) as fp:
            report_contents = json.load(fp)
        try:
            labels = report_contents["data"]["attributes"]["popular_threat_classification"]
        except KeyError:
            missing_full.append(vt_file)
            continue

        try:
            increment_histogram(labels["popular_threat_category"], category_histogram)
        except KeyError:
            missing_category.append(vt_file)

        try:
            increment_histogram(labels["popular_threat_name"], name_histogram)
        except KeyError:
            missing_name.append(vt_file)

        if labels["suggested_threat_label"] in label_histogram:
            label_histogram[labels["suggested_threat_label"]] += 1
            count_labels += 1
        else:
            label_histogram[labels["suggested_threat_label"]] = 1
            count_labels += 1

    print("Missing full:", len(missing_full))
    print("Missing category:", len(missing_category))
    print("Missing name:", len(missing_name))
    print("Missing name and category:", len(set(missing_category) & set(missing_name)))

    print("Number of labels:", len(label_histogram))
    print("Number of categories:", len(category_histogram))
    print("Number of names:", len(name_histogram))

    print("Number of labels:", count_labels)

    print()
    pprint.pprint(sorted(label_histogram.items(), key=lambda k: k[1], reverse=True)[:10])
    print()
    pprint.pprint(sorted(name_histogram.items(), key=lambda k: k[1], reverse=True)[:10])
    print()
    pprint.pprint(sorted(category_histogram.items(), key=lambda k: k[1], reverse=True))

    return label_histogram, category_histogram, name_histogram

labels, categories, names = count_malware_types()

#pprint.pprint(labels)
#pprint.pprint(categories)
#pprint.pprint(names)
