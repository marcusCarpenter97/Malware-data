""" Generate statistics on and study features in CAPE reports. """
import os
import json
import pprint

DATA_PATH = "/media/cape/Seagate Expansion Drive/Malware-dataset/"

def count_features():
    """ Build a dictionary containing a histogram of the features found in the
    data. """

    cape_prefix = "CAPE_"
    result = {}

    cape_dirs = [item for item in os.listdir(DATA_PATH) if cape_prefix in item]
    for cape_dir in cape_dirs:
        batch_path = os.path.join(DATA_PATH, cape_dir)
        batch_files = os.listdir(batch_path)

        histogram = {}
        
        for report in batch_files:
            report_path = os.path.join(batch_path, report)
            with open(report_path, 'r') as rp:
                report_contents = json.load(rp)

            for key in report_contents.keys():
                if key in histogram:
                    histogram[key] += 1
                else:
                    histogram[key] = 1

        result[cape_dir] = histogram
    return result

def find_malicious_bening():
    """ Find benign samples that were flagged as malicious. """

    benign_dir = "CAPE_benign"

    benign_path = os.path.join(DATA_PATH, benign_dir)

    for benign_report in os.listdir(benign_path):
        report_path = os.path.join(benign_path, benign_report)
        with open(report_path, 'r') as rp:
            report_data = json.load(rp)

        if 'detections' in report_data.keys() or 'malfamily_tag' in report_data.keys():
            print(report_path)

find_malicious_bening()
#res = count_features()
#pprint.pprint(res)
