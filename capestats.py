""" Generate statistics on and study features in CAPE reports. """
import os
import json
import pprint

DATA_PATH = "/media/cape/Seagate Expansion Drive/Malware-dataset/Full"

def count_features():
    """ Build a dictionary containing a histogram of the features found in the
    data. """

    cape_prefix = "CAPE_"
    result = {}

    cape_dirs = [item for item in os.listdir(DATA_PATH) if cape_prefix in item]
    for cape_dir in cape_dirs:
        batch_path = os.path.join(DATA_PATH, cape_dir)
        batch_files = os.listdir(batch_path)

        histogram = {}
        
        for report in batch_files:
            report_path = os.path.join(batch_path, report)
            with open(report_path, 'r') as rp:
                report_contents = json.load(rp)

            for key in report_contents.keys():
                if key in histogram:
                    histogram[key] += 1
                else:
                    histogram[key] = 1

        result[cape_dir] = histogram
    return result

def find_malicious_bening():
    """ Find benign samples that were flagged as malicious. """

    benign_dir = "CAPE_benign"

    benign_path = os.path.join(DATA_PATH, benign_dir)

    for benign_report in os.listdir(benign_path):
        report_path = os.path.join(benign_path, benign_report)
        with open(report_path, 'r') as rp:
            report_data = json.load(rp)

        if 'detections' in report_data.keys() or 'malfamily_tag' in report_data.keys():
            print(report_path)

def check_file_names():
    root = "/media/cape/Seagate Expansion Drive/"

    exe = "MALWARE VirusShare_00389/"

    cape = "Malware-dataset/Full/CAPE_389"

    vt = "Malware-dataset/Full/VirusShare_00389"

    orig_exe = os.listdir(os.path.join(root,exe))
    orig_exe = [name[11:] for name in orig_exe]

    cape_reports = os.listdir(os.path.join(root,cape))
    cape_reports = [name[:-5] for name in cape_reports]

    cape_exe_inter = set(orig_exe) & set(cape_reports)

    print("orig_exe len:", len(orig_exe))
    print("cape_reports len:", len(cape_reports))
    print("cape_exe_inter len:", len(cape_exe_inter))

    vt_md5s = []
    vt_files = os.listdir(os.path.join(root,vt))
    for count, vt_file in enumerate(vt_files):
        vt_path = os.path.join(root,vt,vt_file)
        print(f"\r {count}/{len(vt_files)}", end="")
        with open(vt_path) as vp:
            vt_contents = json.load(vp)
        vt_md5s.append(vt_contents["data"]["attributes"]["md5"])

    print("vt_md5s len:", len(vt_md5s))

    print("exe and vt:",  len(set(orig_exe) & set(vt_md5s)))
    print("cape and vt:",  len(set(cape_reports) & set(vt_md5s)))
    print("exe and cape and vt:",  len(set(orig_exe) & set(cape_reports) & set(vt_md5s)))

