import logging
import backend

class DataHandler:

    def __init__(self):
        logging.basicConfig(level=logging.DEBUG,
                format="%(asctime)s - %(levelname)s: %(message)s",
                handlers=[logging.StreamHandler(),
                logging.FileHandler("DataHandler.log")])
        logging.info("Logger initialised by Data Handler.")

        batch_meta_data = backend.open_json(backend.Batch.conf_path)

        self.batches = {}
        for batch_name in batch_meta_data:
            self.batches[batch_name] = backend.Batch(batch_name,
                    batch_meta_data[batch_name]["year"],
                    batch_meta_data[batch_name]["start"],
                    batch_meta_data[batch_name]["stop"])

    def load_data(self):
        """ Loads cape and vt data into memory """
        for batch_name, batch in self.batches.items():
            logging.info("Loading CAPE reports for batch %s", batch_name)
            report_hashes = batch.load_reports()
            logging.info("Loading VT reports for batch %s", batch_name)
            batch.load_vt_reports(report_hashes)

    def calculate_data_stats(self):
        # print/returns a report on the data. Latex, stdout? More info?
        for batch_name in self.batches:
            print(self.batches[batch_name].to_string())

    def prepare_data(self):
        pass # returns the data in a format usable by ML models. Can select specific batches.

        #TODO move to backend
        #self.batches = {}


    #def load_cape_data(self):
    #    logging.info("Loading cape data into memory.")
    #    for batch_name in self.batches:
    #        logging.info("Loading batch: %s", batch_name)
    #        self.batches[batch_name].load_reports()

    #def load_vt_data(self):
    #    logging.info("Loading vt data into memory.")
    #    for batch_name in self.batches:
    #        logging.info("Loading batch: %s", batch_name)
    #        self.batches[batch_name].load_vt_reports()

    #def check_batch_size(self, batch_name=None):
    #    if batch_name:
    #        self.batches[batch_name].calculate_memory_usage()
    #    else:
    #        for batch in self.batches:
    #            self.batches[batch_name].calculate_memory_usage()

